# C-lesson

[] 2.1 　　: プレゼン
[] 2.2 問1 : プレゼン
[] 2.2 問2 : プレゼン

[] 3.1 (1): 口頭説明
[] 3.1 (2): 口頭説明

[] 3.2 (1): 口頭説明
[] 3.2 (2): 口頭説明
[] 3.2 (3): 口頭説明
[] 3.2 (4)

[o] 3.3 (1)
[o] 3.3 (2) 
- 引数が不適切な場合はUsageを表示してただちに終了。elseはなるべく使わないように修正しましょう。

[o] 3.4 (1)
	- インデント位置を統一しましょう。
	- 引数がなかった場合の処理も書きましょう。(異常終了しないようにする)
[△] 3.4 (2): 口頭説明をあとで
	- プログラムが 3.4(1)と同じ??

[o] 4(1)
	- インデント位置を統一しましょう。
[o] 4(2)
	- 定義が足りないような...
[o] 4(3)
	- getdistの項目について
		- コンパイルから実行までまとめて書くことはあまりなくて，
		大抵はコンパイルして実行形式を作るところまでで一区切りにします。
		コンパイルに失敗した時にも，実行形式があれば実行してしまいますし，
		なければエラーがでますので。
		もっとも，山根さんが書いたように，コンパイルしたら，ただちに実行する
		ように指定することが，いけないわけでもありません。
		一応の参考までに。


[o] 5(1)
	- genrandは，課題の文に「結果を各行に」とあるように，一つの乱数を発生するごとに開業しましょう

[] 5(2)
- 2回目
	- 引数の変数名を c よりももう少しわかりやすい名前にしましょう
	- 引数による条件分岐は switch を使うほうがプログラムの構造がわかりやすくなります

- 1回目
	- #ifdefをできるだけへらす工夫をしましょう。#ifdef を使う場合も，#elseの前後に重複ができるだけないようにしましょう。
	ちなみに，このプログラムの場合，#ifdefは1回使うだけですみます
	- main関数については，3.3(2)のコメント参照
	- ファイルを開いてデータを読み込むのをmain関数で行えば，それぞれの関数で
	データを読む命令は不要になります。データ処理のプログラムでは，一つのデータに対して
	複数の処理を行うことも多いので，処理が遅いデータの読み書き(ハードディスクへのアクセスは，
	メモリに対するアクセスに対してはるかに遅い)は1回だけ行い，	メモリに格納した上でいろいろな処理をするのが一般的です。
[o] 5(3)
	- 5(2)参照

[o] 6(1)
[] 6(2)
	- main文のelseを減らしましょう
	- 5(2)も参考に

[] 7(1)(a) 口頭で
[o] 7(1)(b)
	- ファイル名には，拡張子の直前以外で"."を使うのはなるべくやめましょう。
    - forループの回数を指定するための変数には，できるだけfloat/doubleは使わず，intを使う。
      割り算した結果をcastingするのも危険(浮動小数点の精度の問題で，意図した回数にならないことがあるので)。

[] 7(2)(a) 口頭で
[o] 7(2)(b)
	- 配列は使わずに書き直せますか? (特にデータを配列に保存する必要がないときには，配列は使わない)
[o] 7(2)(c)